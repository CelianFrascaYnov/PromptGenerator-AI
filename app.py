import streamlit as st
import random
from generator import generate_prompt, load_error

st.set_page_config(page_title="Prompt Generator", page_icon="ü§ñ", layout="centered")

# Initialisation de l'historique et de l'√©tat de g√©n√©ration
if 'history' not in st.session_state:
    st.session_state.history = []
if 'generating' not in st.session_state:
    st.session_state.generating = False

st.markdown("<h1 style='text-align: left;'>Prompt Generator for ChatGPT</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: left;'>G√©n√©rez automatiquement des prompts efficaces, clairs et adapt√©s √† vos besoins</p>", unsafe_allow_html=True)

PROMPT_CATEGORIES = {
    "Marketing": "Tu es un expert en marketing digital et communication persuasive.",
    "Storytelling": "Tu es un √©crivain cr√©atif sp√©cialis√© dans la narration immersive.",
    "Code": "Tu es un d√©veloppeur exp√©riment√© qui cr√©e des prompts techniques pour g√©n√©rer du code clair et fonctionnel.",
    "√âtude": "Tu es un professeur p√©dagogue, expert en formulation de questions et d'exercices acad√©miques.",
}

DETAIL_LEVELS = {
    "Simple": "Le prompt doit √™tre court, direct et facile √† comprendre.",
    "Moyen": "Le prompt doit fournir des instructions compl√®tes mais concises.",
    "Tr√®s d√©taill√©": "Le prompt doit inclure un r√¥le, un objectif, un contexte et des consignes structur√©es.",
}

PROMPT_PATTERNS = {
    "Agis comme...": "Cr√©e un prompt qui commence par 'Agis comme...' pour √©tablir un r√¥le clair.",
    "√âtapes √† suivre": "Formule un prompt qui demande une r√©ponse √©tape par √©tape.",
    "Objectif clair": "Structure un prompt autour d'un objectif explicite √† atteindre.",
    "R√©ponse avec contraintes": "G√©n√®re un prompt demandant une r√©ponse avec des contraintes pr√©cises (longueur, ton, format).",
    "Cr√©atif / roleplay": "Formule un prompt immersif avec un ton ou une personnalit√© sp√©cifique.",
}

PLACEHOLDER_EXAMPLES = [
    "Je veux ouvrir un foodtruck √† Paris",
    "Je cherche une id√©e de vid√©o TikTok virale pour une app mobile",
    "Je veux une histoire de science-fiction dans un monde post-apocalyptique",
    "J‚Äôai besoin d‚Äôun script Python pour automatiser l‚Äôenvoi de mails",
    "Je veux une fiche de r√©vision sur la m√©moire √† long terme",
    "G√©n√®re une strat√©gie marketing pour une marque de v√™tements √©thiques",
    "Cr√©e un quiz de 10 questions sur les civilisations anciennes",
    "Je veux un mini-jeu Flutter avec un bouton et un score",
    "Cr√©e une explication simple du th√©or√®me de Pythagore",
    "R√©dige une sc√®ne dramatique entre deux fr√®res ennemis"
]

generating = st.session_state.generating

with st.sidebar:
    st.header("Param√®tres du prompt")
    category = st.selectbox("üìå Type de prompt", list(PROMPT_CATEGORIES.keys()))
    style = st.selectbox("üéõÔ∏è Niveau de d√©tail", list(DETAIL_LEVELS.keys()))
    pattern = st.selectbox("üß† Mod√®le de g√©n√©ration", list(PROMPT_PATTERNS.keys()))
    st.caption(PROMPT_PATTERNS[pattern])

st.markdown("### Quel est votre besoin ?")
if "random_placeholder" not in st.session_state:
    st.session_state.random_placeholder = random.choice(PLACEHOLDER_EXAMPLES)

user_input = st.text_area("", placeholder=st.session_state.random_placeholder, height=150)


if st.button("‚ú® G√©n√©rer le prompt", disabled=generating):
    if load_error is not None:
        st.error(f"Le mod√®le n'a pas pu √™tre charg√© : {load_error}")
    elif not user_input or not user_input.strip():
        st.warning("Veuillez d'abord renseigner votre besoin.")
    else:
        st.session_state.generating = True
        with st.spinner("G√©n√©ration du prompt en cours..."):
            result = generate_prompt(category, style, pattern, user_input)
        st.session_state.generating = False

        st.success("‚úÖ Prompt g√©n√©r√© avec succ√®s !")
        st.markdown("### üìã R√©sultat")
        st.code(result, language="markdown")

        st.download_button("üì• T√©l√©charger le prompt", result, file_name="prompt.txt", mime="text/plain")

        st.session_state.history.append({
            "prompt": result,
            "input": user_input,
            "category": category,
            "style": style,
            "pattern": pattern,
        })

# Historique
if st.session_state.history:
    st.markdown("### üìö Historique")
    for i, item in enumerate(reversed(st.session_state.history[-5:]), 1):
        with st.expander(f"üîπ Prompt #{len(st.session_state.history) - i + 1}"):
            st.markdown(f"**Input utilisateur :** {item['input']}")
            st.markdown(f"**Cat√©gorie :** {item['category']}")
            st.markdown(f"**Niveau de d√©tail :** {item['style']}")
            st.markdown(f"**Mod√®le :** {item['pattern']}")
            st.code(item['prompt'], language="markdown")
